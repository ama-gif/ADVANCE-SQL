use mavenmovies;
-- Ques 1:Rank the customers based on the total amount they've spent on rentals.
SELECT
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    SUM(p.amount) AS total_amount_spent
FROM
    customer c
JOIN
    payment p ON c.customer_id = p.customer_id
GROUP BY
    c.customer_id, customer_name
ORDER BY
    total_amount_spent DESC;
-- Ques 2: Calculate the cumulative revenue generated by each film over time.
select f.film_id, f.title,p.payment_date, sum(p.amount) over (partition by f.film_id order by p.payment_date)
 as cumulative_revenue from film f join inventory i on f.film_id = i.film_id 
 join rental r on i.inventory_id = r.inventory_id join payment p on r.rental_id = p.rental_id
 order by f.film_id, p.payment_date;
 -- Ques 3: Determine the average rental duration for each film, considering films with similar lengths.
 select f.film_id,f.title,f.length,avg(rental_duration) as average_rental_duration from film f group by f.film_id,f.title,f.length
 order by film_id;
 -- Ques 4 : Identify the top 3 films in each category based on their rental counts.
 WITH RankedFilms AS (
    SELECT
        fc.category_id,
        f.film_id,
        f.title,
        DENSE_RANK() OVER (PARTITION BY fc.category_id ORDER BY COUNT(r.rental_id) DESC) AS ranking
    FROM
        film f
    JOIN
        film_category fc ON f.film_id = fc.film_id
    LEFT JOIN
        inventory i ON f.film_id = i.film_id
    LEFT JOIN
        rental r ON i.inventory_id = r.inventory_id
    GROUP BY
        fc.category_id, f.film_id, f.title
)
SELECT
    rf.category_id,
    rf.film_id,
    rf.title,
    rf.ranking
FROM
    RankedFilms rf
WHERE
    rf.ranking <= 3
ORDER BY
    rf.category_id, rf.ranking; 
    
    
 -- Ques 5: Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers
select c.customer_id,c.first_name,c.last_name,count(r.rental_id) as customer_rentals, avg(count(r.rental_id)) over() as rental_count_differance from customer c join rental r on c.customer_id = r.customer_id
group by c.customer_id,c.first_name,c.last_name order by c.customer_id;


-- QUES 6: Find the monthly revenue trend for the entire rental store over time.
select date_format (payment_date,'%y-%m') as month, sum(amount) as monthly_revanue from payment group by
date_format (payment_date,'%y-%m') order by month;


-- Ques 7: Identify the customers whose total spending on rentals falls within the top 20% of all customers
wITH CustomerSpending AS (
    SELECT
        c.customer_id,
        c.first_name,
        c.last_name,
        SUM(p.amount) AS total_spending
    FROM
        customer c
    LEFT JOIN
        payment p ON c.customer_id = p.customer_id
    GROUP BY
        c.customer_id, c.first_name, c.last_name
)

SELECT
    customer_id,
    first_name,
    last_name,
    total_spending
FROM
    (
        SELECT
            customer_id,
            first_name,
            last_name,
            total_spending,
            PERCENT_RANK() OVER (ORDER BY total_spending DESC) AS spending_percentile
        FROM
            CustomerSpending
    ) AS ranked_customers
WHERE
    spending_percentile <= 0.2
ORDER BY
    total_spending DESC;
    
-- Ques 8: Calculate the running total of rentals per category, ordered by rental count.
WITH CategoryRentalCounts AS (
    SELECT
        c.category_id,
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count
    FROM
        category c
    LEFT JOIN
        film_category fc ON c.category_id = fc.category_id
    LEFT JOIN
        film f ON fc.film_id = f.film_id
    LEFT JOIN
        inventory i ON f.film_id = i.film_id
    LEFT JOIN
        rental r ON i.inventory_id = r.inventory_id
    GROUP BY
        c.category_id, c.name
    ORDER BY
        rental_count DESC
)

SELECT
    category_id,
    category_name,
    rental_count,
    SUM(rental_count) OVER (ORDER BY rental_count DESC) AS running_total
FROM
    CategoryRentalCounts
ORDER BY
    rental_count DESC;
    
-- Qus 9: Find the films that have been rented less than the average rental count for their respective categories.
WITH FilmRentalCounts AS (
    SELECT
        f.film_id,
        f.title,
        c.category_id,
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count
    FROM
        film f
    LEFT JOIN
        film_category fc ON f.film_id = fc.film_id
    LEFT JOIN
        category c ON fc.category_id = c.category_id
    LEFT JOIN
        inventory i ON f.film_id = i.film_id
    LEFT JOIN
        rental r ON i.inventory_id = r.inventory_id
    GROUP BY
        f.film_id, f.title, c.category_id, c.name
)

SELECT
    fr.film_id,
    fr.title,
    fr.category_id,
    fr.category_name,
    fr.rental_count
FROM
    FilmRentalCounts fr
JOIN
    (
        SELECT
            category_id,
            AVG(rental_count) AS avg_rental_count
        FROM
            FilmRentalCounts
        GROUP BY
            category_id
    ) AS AvgRentalPerCategory ON fr.category_id = AvgRentalPerCategory.category_id
WHERE
    fr.rental_count < AvgRentalPerCategory.avg_rental_count
ORDER BY
    fr.category_id, fr.rental_count DESC;  
    
-- Ques 10:Identify the top 5 months with the highest revenue and display the revenue generated in each month.    
SELECT
    DATE_FORMAT(payment_date, '%Y-%m') AS revenue_month,
    SUM(amount) AS total_revenue
FROM
    payment
GROUP BY
    revenue_month
ORDER BY
    total_revenue DESC
LIMIT 5;


